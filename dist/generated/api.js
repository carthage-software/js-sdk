"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Carthage API
 * The API Specification for Carthage
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedApi = exports.SharedApiFactory = exports.SharedApiFp = exports.SharedApiAxiosParamCreator = exports.LogManagementApi = exports.LogManagementApiFactory = exports.LogManagementApiFp = exports.LogManagementApiAxiosParamCreator = exports.SharedPingResourceTypeEnum = exports.LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum = exports.LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum = exports.LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum = exports.LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum = exports.LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum = exports.LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum = exports.LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum = exports.LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum = exports.LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum = exports.LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum = exports.LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum = exports.LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum = exports.LogManagementLogStatisticsFrequency = exports.LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum = exports.LogManagementLogLogResourceLevelValueEnum = exports.LogManagementLogLogResourceLevelNameEnum = exports.LogManagementLogLogResourceTypeEnum = exports.LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum = exports.LogManagementLogLogNamespaceResourceTypeEnum = exports.LogManagementLogLogFilterSortBy = exports.LogManagementLogLogFilterOrder = exports.LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum = exports.LogManagementLogLogEntryTagResourceTypeEnum = exports.LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum = exports.LogManagementLogLogEntrySourceResourceTypeEnum = exports.LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum = exports.LogManagementLogLogEntryResourceTypeEnum = exports.LogManagementLogLogEntryFilterOrder = exports.LogManagementLogCreateLogLevelEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.LogManagementLogCreateLogLevelEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_250: 250,
    NUMBER_300: 300,
    NUMBER_400: 400,
    NUMBER_500: 500,
    NUMBER_550: 550,
    NUMBER_600: 600
};
/**
 * The order of the log entries.
 * @export
 * @enum {string}
 */
exports.LogManagementLogLogEntryFilterOrder = {
    Asc: 'ASC',
    Desc: 'DESC'
};
exports.LogManagementLogLogEntryResourceTypeEnum = {
    LogEntry: 'log_entry'
};
exports.LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum = {
    PaginatedCollection: 'paginated_collection'
};
exports.LogManagementLogLogEntrySourceResourceTypeEnum = {
    LogEntrySource: 'log_entry_source'
};
exports.LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum = {
    Collection: 'collection'
};
exports.LogManagementLogLogEntryTagResourceTypeEnum = {
    LogEntryTag: 'log_entry_tag'
};
exports.LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum = {
    Collection: 'collection'
};
/**
 * The order of the logs.
 * @export
 * @enum {string}
 */
exports.LogManagementLogLogFilterOrder = {
    Asc: 'ASC',
    Desc: 'DESC'
};
/**
 * The field to sort the logs by.
 * @export
 * @enum {string}
 */
exports.LogManagementLogLogFilterSortBy = {
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt',
    FirstEntryOccurredAt: 'firstEntryOccurredAt',
    LastEntryOccurredAt: 'lastEntryOccurredAt',
    Level: 'level'
};
exports.LogManagementLogLogNamespaceResourceTypeEnum = {
    LogNamespace: 'log_namespace'
};
exports.LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum = {
    Collection: 'collection'
};
exports.LogManagementLogLogResourceTypeEnum = {
    Log: 'log'
};
exports.LogManagementLogLogResourceLevelNameEnum = {
    Debug: 'Debug',
    Info: 'Info',
    Notice: 'Notice',
    Warning: 'Warning',
    Error: 'Error',
    Critical: 'Critical',
    Alert: 'Alert',
    Emergency: 'Emergency'
};
exports.LogManagementLogLogResourceLevelValueEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_250: 250,
    NUMBER_300: 300,
    NUMBER_400: 400,
    NUMBER_500: 500,
    NUMBER_550: 550,
    NUMBER_600: 600
};
exports.LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum = {
    PaginatedCollection: 'paginated_collection'
};
/**
 * The frequency for log statistics, specifying how the data should be aggregated.
 * @export
 * @enum {string}
 */
exports.LogManagementLogStatisticsFrequency = {
    Yearly: 'yearly',
    Quarterly: 'quarterly',
    Monthly: 'monthly',
    Weekly: 'weekly',
    Daily: 'daily',
    Hourly: 'hourly'
};
exports.LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum = {
    LogEntryFrequencyCount: 'log_entry_frequency_count'
};
exports.LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum = {
    StatisticCollection: 'statistic_collection'
};
exports.LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum = {
    LogEntrySourceFrequency: 'log_entry_source_frequency'
};
exports.LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum = {
    StatisticCollection: 'statistic_collection'
};
exports.LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum = {
    LogEntryTagDistribution: 'log_entry_tag_distribution'
};
exports.LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum = {
    StatisticCollection: 'statistic_collection'
};
exports.LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum = {
    LogFrequencyCount: 'log_frequency_count'
};
exports.LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum = {
    StatisticCollection: 'statistic_collection'
};
exports.LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum = {
    LogLevelStatistic: 'log_level_statistic'
};
exports.LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum = {
    StatisticCollection: 'statistic_collection'
};
exports.LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum = {
    Debug: 'Debug',
    Info: 'Info',
    Notice: 'Notice',
    Warning: 'Warning',
    Error: 'Error',
    Critical: 'Critical',
    Alert: 'Alert',
    Emergency: 'Emergency'
};
exports.LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_250: 250,
    NUMBER_300: 300,
    NUMBER_400: 400,
    NUMBER_500: 500,
    NUMBER_550: 550,
    NUMBER_600: 600
};
exports.SharedPingResourceTypeEnum = {
    Ping: 'ping'
};
/**
 * LogManagementApi - axios parameter creator
 * @export
 */
const LogManagementApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Collect multiple log entries, for multiple logs.
         * @summary Collect Multiple Logs
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCollect: async (requestBody, options = {}) => {
            const localVarPath = `/log-management/collect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Collect log entries from a log.
         * @summary Collect Log Entries
         * @param {LogManagementLogCollectLog} [logManagementLogCollectLog]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCollectLog: async (logManagementLogCollectLog, options = {}) => {
            const localVarPath = `/log-management/log/collect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logManagementLogCollectLog, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new log.
         * @summary Create Log
         * @param {LogManagementLogCreateLog} [logManagementLogCreateLog]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCreateLog: async (logManagementLogCreateLog, options = {}) => {
            const localVarPath = `/log-management/log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logManagementLogCreateLog, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new log entry.
         * @summary Create Log Entry
         * @param {LogManagementLogCreateLogEntry} [logManagementLogCreateLogEntry]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCreateLogEntry: async (logManagementLogCreateLogEntry, options = {}) => {
            const localVarPath = `/log-management/log/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logManagementLogCreateLogEntry, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a log by identity.
         * @summary Delete Log
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementDeleteLog: async (identity, options = {}) => {
            // verify required parameter 'identity' is not null or undefined
            (0, common_1.assertParamExists)('logManagementDeleteLog', 'identity', identity);
            const localVarPath = `/log-management/log/{identity}`
                .replace(`{${"identity"}}`, encodeURIComponent(String(identity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a log entry by identity.
         * @summary Delete Log Entry
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementDeleteLogEntry: async (identity, options = {}) => {
            // verify required parameter 'identity' is not null or undefined
            (0, common_1.assertParamExists)('logManagementDeleteLogEntry', 'identity', identity);
            const localVarPath = `/log-management/log/entry/{identity}`
                .replace(`{${"identity"}}`, encodeURIComponent(String(identity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a log by its identity.
         * @summary Get Log
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLog: async (identity, options = {}) => {
            // verify required parameter 'identity' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLog', 'identity', identity);
            const localVarPath = `/log-management/log/{identity}`
                .replace(`{${"identity"}}`, encodeURIComponent(String(identity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of logs.
         * @summary Get Log Collection
         * @param {string} [contains]
         * @param {Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>} [levels]
         * @param {string} [from]
         * @param {string} [to]
         * @param {LogManagementLogLogFilterSortBy} [sortBy]
         * @param {LogManagementLogLogFilterOrder} [order]
         * @param {number} [page] The page number for pagination. Defaults to 1.
         * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogCollection: async (contains, levels, from, to, sortBy, order, page, itemsPerPage, options = {}) => {
            const localVarPath = `/log-management/log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (contains !== undefined) {
                localVarQueryParameter['contains'] = contains;
            }
            if (levels) {
                localVarQueryParameter['levels[]'] = levels;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from instanceof Date) ?
                    from.toISOString() :
                    from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = (to instanceof Date) ?
                    to.toISOString() :
                    to;
            }
            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (itemsPerPage !== undefined) {
                localVarQueryParameter['items_per_page'] = itemsPerPage;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a log entry by its identity.
         * @summary Get Log Entry
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntry: async (identity, options = {}) => {
            // verify required parameter 'identity' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntry', 'identity', identity);
            const localVarPath = `/log-management/log/entry/{identity}`
                .replace(`{${"identity"}}`, encodeURIComponent(String(identity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of log entries.
         * @summary Get Log Entry Collection
         * @param {number} [page] The page number for pagination. Defaults to 1.
         * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
         * @param {string} [logIdentity]
         * @param {string} [before]
         * @param {string} [after]
         * @param {LogManagementLogLogEntryFilterOrder} [order]
         * @param {string} [source]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryCollection: async (page, itemsPerPage, logIdentity, before, after, order, source, options = {}) => {
            const localVarPath = `/log-management/log/entry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (itemsPerPage !== undefined) {
                localVarQueryParameter['items_per_page'] = itemsPerPage;
            }
            if (logIdentity !== undefined) {
                localVarQueryParameter['log_identity'] = logIdentity;
            }
            if (before !== undefined) {
                localVarQueryParameter['before'] = (before instanceof Date) ?
                    before.toISOString() :
                    before;
            }
            if (after !== undefined) {
                localVarQueryParameter['after'] = (after instanceof Date) ?
                    after.toISOString() :
                    after;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the frequency count of log entries.
         * @summary Get Log Entry Frequency Count
         * @param {LogManagementLogStatisticsFrequency} frequency
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryFrequencyCountCollection: async (frequency, from, to, options = {}) => {
            // verify required parameter 'frequency' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntryFrequencyCountCollection', 'frequency', frequency);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntryFrequencyCountCollection', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntryFrequencyCountCollection', 'to', to);
            const localVarPath = `/log-management/log/statistic/entry-frequency-count/{frequency}/from/{from}/to/{to}`
                .replace(`{${"frequency"}}`, encodeURIComponent(String(frequency)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of log entry sources.
         * @summary Get Log Entry Source Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntrySourceCollection: async (options = {}) => {
            const localVarPath = `/log-management/log/entry/source`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the frequency count of log entry sources.
         * @summary Get Log Entry Source Frequency
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntrySourceFrequencyCollection: async (from, to, options = {}) => {
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntrySourceFrequencyCollection', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntrySourceFrequencyCollection', 'to', to);
            const localVarPath = `/log-management/log/statistic/entry-source-frequency/from/{from}/to/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of log entry tags.
         * @summary Get Log Entry Tag Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryTagCollection: async (options = {}) => {
            const localVarPath = `/log-management/log/entry/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the distribution of log entry tags.
         * @summary Get Log Entry Tag Distribution
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryTagDistributionCollection: async (from, to, options = {}) => {
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntryTagDistributionCollection', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogEntryTagDistributionCollection', 'to', to);
            const localVarPath = `/log-management/log/statistic/entry-tag-distribution/from/{from}/to/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the frequency count of logs.
         * @summary Get Log Frequency Count
         * @param {LogManagementLogStatisticsFrequency} frequency
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogFrequencyCountCollection: async (frequency, from, to, options = {}) => {
            // verify required parameter 'frequency' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogFrequencyCountCollection', 'frequency', frequency);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogFrequencyCountCollection', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogFrequencyCountCollection', 'to', to);
            const localVarPath = `/log-management/log/statistic/frequency-count/{frequency}/from/{from}/to/{to}`
                .replace(`{${"frequency"}}`, encodeURIComponent(String(frequency)))
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the statistics of log levels.
         * @summary Get Log Level Statistics
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogLevelStatisticCollection: async (from, to, options = {}) => {
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogLevelStatisticCollection', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('logManagementGetLogLevelStatisticCollection', 'to', to);
            const localVarPath = `/log-management/log/statistic/level-statistics/from/{from}/to/{to}`
                .replace(`{${"from"}}`, encodeURIComponent(String(from)))
                .replace(`{${"to"}}`, encodeURIComponent(String(to)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a collection of log namespaces.
         * @summary Get Log Namespace Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogNamespaceCollection: async (options = {}) => {
            const localVarPath = `/log-management/log/namespace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LogManagementApiAxiosParamCreator = LogManagementApiAxiosParamCreator;
/**
 * LogManagementApi - functional programming interface
 * @export
 */
const LogManagementApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LogManagementApiAxiosParamCreator)(configuration);
    return {
        /**
         * Collect multiple log entries, for multiple logs.
         * @summary Collect Multiple Logs
         * @param {{ [key: string]: any; }} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementCollect(requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementCollect(requestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Collect log entries from a log.
         * @summary Collect Log Entries
         * @param {LogManagementLogCollectLog} [logManagementLogCollectLog]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementCollectLog(logManagementLogCollectLog, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementCollectLog(logManagementLogCollectLog, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a new log.
         * @summary Create Log
         * @param {LogManagementLogCreateLog} [logManagementLogCreateLog]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementCreateLog(logManagementLogCreateLog, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementCreateLog(logManagementLogCreateLog, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Create a new log entry.
         * @summary Create Log Entry
         * @param {LogManagementLogCreateLogEntry} [logManagementLogCreateLogEntry]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementCreateLogEntry(logManagementLogCreateLogEntry, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementCreateLogEntry(logManagementLogCreateLogEntry, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Delete a log by identity.
         * @summary Delete Log
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementDeleteLog(identity, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementDeleteLog(identity, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Delete a log entry by identity.
         * @summary Delete Log Entry
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementDeleteLogEntry(identity, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementDeleteLogEntry(identity, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a log by its identity.
         * @summary Get Log
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLog(identity, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLog(identity, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of logs.
         * @summary Get Log Collection
         * @param {string} [contains]
         * @param {Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>} [levels]
         * @param {string} [from]
         * @param {string} [to]
         * @param {LogManagementLogLogFilterSortBy} [sortBy]
         * @param {LogManagementLogLogFilterOrder} [order]
         * @param {number} [page] The page number for pagination. Defaults to 1.
         * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogCollection(contains, levels, from, to, sortBy, order, page, itemsPerPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogCollection(contains, levels, from, to, sortBy, order, page, itemsPerPage, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a log entry by its identity.
         * @summary Get Log Entry
         * @param {string} identity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntry(identity, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntry(identity, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of log entries.
         * @summary Get Log Entry Collection
         * @param {number} [page] The page number for pagination. Defaults to 1.
         * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
         * @param {string} [logIdentity]
         * @param {string} [before]
         * @param {string} [after]
         * @param {LogManagementLogLogEntryFilterOrder} [order]
         * @param {string} [source]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntryCollection(page, itemsPerPage, logIdentity, before, after, order, source, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntryCollection(page, itemsPerPage, logIdentity, before, after, order, source, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the frequency count of log entries.
         * @summary Get Log Entry Frequency Count
         * @param {LogManagementLogStatisticsFrequency} frequency
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntryFrequencyCountCollection(frequency, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntryFrequencyCountCollection(frequency, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of log entry sources.
         * @summary Get Log Entry Source Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntrySourceCollection(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntrySourceCollection(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the frequency count of log entry sources.
         * @summary Get Log Entry Source Frequency
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntrySourceFrequencyCollection(from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntrySourceFrequencyCollection(from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of log entry tags.
         * @summary Get Log Entry Tag Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntryTagCollection(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntryTagCollection(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the distribution of log entry tags.
         * @summary Get Log Entry Tag Distribution
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogEntryTagDistributionCollection(from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogEntryTagDistributionCollection(from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the frequency count of logs.
         * @summary Get Log Frequency Count
         * @param {LogManagementLogStatisticsFrequency} frequency
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogFrequencyCountCollection(frequency, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogFrequencyCountCollection(frequency, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get the statistics of log levels.
         * @summary Get Log Level Statistics
         * @param {string} from
         * @param {string} to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogLevelStatisticCollection(from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogLevelStatisticCollection(from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Retrieve a collection of log namespaces.
         * @summary Get Log Namespace Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logManagementGetLogNamespaceCollection(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logManagementGetLogNamespaceCollection(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.LogManagementApiFp = LogManagementApiFp;
/**
 * LogManagementApi - factory interface
 * @export
 */
const LogManagementApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LogManagementApiFp)(configuration);
    return {
        /**
         * Collect multiple log entries, for multiple logs.
         * @summary Collect Multiple Logs
         * @param {LogManagementApiLogManagementCollectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCollect(requestParameters = {}, options) {
            return localVarFp.logManagementCollect(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Collect log entries from a log.
         * @summary Collect Log Entries
         * @param {LogManagementApiLogManagementCollectLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCollectLog(requestParameters = {}, options) {
            return localVarFp.logManagementCollectLog(requestParameters.logManagementLogCollectLog, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new log.
         * @summary Create Log
         * @param {LogManagementApiLogManagementCreateLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCreateLog(requestParameters = {}, options) {
            return localVarFp.logManagementCreateLog(requestParameters.logManagementLogCreateLog, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new log entry.
         * @summary Create Log Entry
         * @param {LogManagementApiLogManagementCreateLogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementCreateLogEntry(requestParameters = {}, options) {
            return localVarFp.logManagementCreateLogEntry(requestParameters.logManagementLogCreateLogEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a log by identity.
         * @summary Delete Log
         * @param {LogManagementApiLogManagementDeleteLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementDeleteLog(requestParameters, options) {
            return localVarFp.logManagementDeleteLog(requestParameters.identity, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a log entry by identity.
         * @summary Delete Log Entry
         * @param {LogManagementApiLogManagementDeleteLogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementDeleteLogEntry(requestParameters, options) {
            return localVarFp.logManagementDeleteLogEntry(requestParameters.identity, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a log by its identity.
         * @summary Get Log
         * @param {LogManagementApiLogManagementGetLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLog(requestParameters, options) {
            return localVarFp.logManagementGetLog(requestParameters.identity, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of logs.
         * @summary Get Log Collection
         * @param {LogManagementApiLogManagementGetLogCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogCollection(requestParameters = {}, options) {
            return localVarFp.logManagementGetLogCollection(requestParameters.contains, requestParameters.levels, requestParameters.from, requestParameters.to, requestParameters.sortBy, requestParameters.order, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a log entry by its identity.
         * @summary Get Log Entry
         * @param {LogManagementApiLogManagementGetLogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntry(requestParameters, options) {
            return localVarFp.logManagementGetLogEntry(requestParameters.identity, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of log entries.
         * @summary Get Log Entry Collection
         * @param {LogManagementApiLogManagementGetLogEntryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryCollection(requestParameters = {}, options) {
            return localVarFp.logManagementGetLogEntryCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.logIdentity, requestParameters.before, requestParameters.after, requestParameters.order, requestParameters.source, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the frequency count of log entries.
         * @summary Get Log Entry Frequency Count
         * @param {LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryFrequencyCountCollection(requestParameters, options) {
            return localVarFp.logManagementGetLogEntryFrequencyCountCollection(requestParameters.frequency, requestParameters.from, requestParameters.to, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of log entry sources.
         * @summary Get Log Entry Source Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntrySourceCollection(options) {
            return localVarFp.logManagementGetLogEntrySourceCollection(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the frequency count of log entry sources.
         * @summary Get Log Entry Source Frequency
         * @param {LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntrySourceFrequencyCollection(requestParameters, options) {
            return localVarFp.logManagementGetLogEntrySourceFrequencyCollection(requestParameters.from, requestParameters.to, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of log entry tags.
         * @summary Get Log Entry Tag Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryTagCollection(options) {
            return localVarFp.logManagementGetLogEntryTagCollection(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the distribution of log entry tags.
         * @summary Get Log Entry Tag Distribution
         * @param {LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogEntryTagDistributionCollection(requestParameters, options) {
            return localVarFp.logManagementGetLogEntryTagDistributionCollection(requestParameters.from, requestParameters.to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the frequency count of logs.
         * @summary Get Log Frequency Count
         * @param {LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogFrequencyCountCollection(requestParameters, options) {
            return localVarFp.logManagementGetLogFrequencyCountCollection(requestParameters.frequency, requestParameters.from, requestParameters.to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the statistics of log levels.
         * @summary Get Log Level Statistics
         * @param {LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogLevelStatisticCollection(requestParameters, options) {
            return localVarFp.logManagementGetLogLevelStatisticCollection(requestParameters.from, requestParameters.to, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a collection of log namespaces.
         * @summary Get Log Namespace Collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logManagementGetLogNamespaceCollection(options) {
            return localVarFp.logManagementGetLogNamespaceCollection(options).then((request) => request(axios, basePath));
        },
    };
};
exports.LogManagementApiFactory = LogManagementApiFactory;
/**
 * LogManagementApi - object-oriented interface
 * @export
 * @class LogManagementApi
 * @extends {BaseAPI}
 */
class LogManagementApi extends base_1.BaseAPI {
    /**
     * Collect multiple log entries, for multiple logs.
     * @summary Collect Multiple Logs
     * @param {LogManagementApiLogManagementCollectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCollect(requestParameters = {}, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementCollect(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Collect log entries from a log.
     * @summary Collect Log Entries
     * @param {LogManagementApiLogManagementCollectLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCollectLog(requestParameters = {}, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementCollectLog(requestParameters.logManagementLogCollectLog, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new log.
     * @summary Create Log
     * @param {LogManagementApiLogManagementCreateLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCreateLog(requestParameters = {}, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementCreateLog(requestParameters.logManagementLogCreateLog, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new log entry.
     * @summary Create Log Entry
     * @param {LogManagementApiLogManagementCreateLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCreateLogEntry(requestParameters = {}, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementCreateLogEntry(requestParameters.logManagementLogCreateLogEntry, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a log by identity.
     * @summary Delete Log
     * @param {LogManagementApiLogManagementDeleteLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementDeleteLog(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementDeleteLog(requestParameters.identity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a log entry by identity.
     * @summary Delete Log Entry
     * @param {LogManagementApiLogManagementDeleteLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementDeleteLogEntry(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementDeleteLogEntry(requestParameters.identity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a log by its identity.
     * @summary Get Log
     * @param {LogManagementApiLogManagementGetLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLog(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLog(requestParameters.identity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a collection of logs.
     * @summary Get Log Collection
     * @param {LogManagementApiLogManagementGetLogCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogCollection(requestParameters = {}, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogCollection(requestParameters.contains, requestParameters.levels, requestParameters.from, requestParameters.to, requestParameters.sortBy, requestParameters.order, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a log entry by its identity.
     * @summary Get Log Entry
     * @param {LogManagementApiLogManagementGetLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntry(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntry(requestParameters.identity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a collection of log entries.
     * @summary Get Log Entry Collection
     * @param {LogManagementApiLogManagementGetLogEntryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryCollection(requestParameters = {}, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntryCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.logIdentity, requestParameters.before, requestParameters.after, requestParameters.order, requestParameters.source, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the frequency count of log entries.
     * @summary Get Log Entry Frequency Count
     * @param {LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryFrequencyCountCollection(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntryFrequencyCountCollection(requestParameters.frequency, requestParameters.from, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a collection of log entry sources.
     * @summary Get Log Entry Source Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntrySourceCollection(options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntrySourceCollection(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the frequency count of log entry sources.
     * @summary Get Log Entry Source Frequency
     * @param {LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntrySourceFrequencyCollection(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntrySourceFrequencyCollection(requestParameters.from, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a collection of log entry tags.
     * @summary Get Log Entry Tag Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryTagCollection(options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntryTagCollection(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the distribution of log entry tags.
     * @summary Get Log Entry Tag Distribution
     * @param {LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryTagDistributionCollection(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogEntryTagDistributionCollection(requestParameters.from, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the frequency count of logs.
     * @summary Get Log Frequency Count
     * @param {LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogFrequencyCountCollection(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogFrequencyCountCollection(requestParameters.frequency, requestParameters.from, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the statistics of log levels.
     * @summary Get Log Level Statistics
     * @param {LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogLevelStatisticCollection(requestParameters, options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogLevelStatisticCollection(requestParameters.from, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a collection of log namespaces.
     * @summary Get Log Namespace Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogNamespaceCollection(options) {
        return (0, exports.LogManagementApiFp)(this.configuration).logManagementGetLogNamespaceCollection(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LogManagementApi = LogManagementApi;
/**
 * SharedApi - axios parameter creator
 * @export
 */
const SharedApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
         * @summary Retrieve the ping status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options = {}) => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SharedApiAxiosParamCreator = SharedApiAxiosParamCreator;
/**
 * SharedApi - functional programming interface
 * @export
 */
const SharedApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SharedApiAxiosParamCreator)(configuration);
    return {
        /**
         * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
         * @summary Retrieve the ping status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.SharedApiFp = SharedApiFp;
/**
 * SharedApi - factory interface
 * @export
 */
const SharedApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SharedApiFp)(configuration);
    return {
        /**
         * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
         * @summary Retrieve the ping status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options) {
            return localVarFp.ping(options).then((request) => request(axios, basePath));
        },
    };
};
exports.SharedApiFactory = SharedApiFactory;
/**
 * SharedApi - object-oriented interface
 * @export
 * @class SharedApi
 * @extends {BaseAPI}
 */
class SharedApi extends base_1.BaseAPI {
    /**
     * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
     * @summary Retrieve the ping status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedApi
     */
    ping(options) {
        return (0, exports.SharedApiFp)(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SharedApi = SharedApi;
