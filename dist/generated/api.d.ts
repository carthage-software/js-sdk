/**
 * Carthage API
 * The API Specification for Carthage
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface LogManagementCollect
 */
export interface LogManagementCollect {
    [key: string]: any;
    /**
     *
     * @type {Array<LogManagementLogCollectLog>}
     * @memberof LogManagementCollect
     */
    'collect_logs': Array<LogManagementLogCollectLog>;
}
/**
 *
 * @export
 * @interface LogManagementLogCollectLog
 */
export interface LogManagementLogCollectLog {
    /**
     *
     * @type {LogManagementLogCreateLog}
     * @memberof LogManagementLogCollectLog
     */
    'log': LogManagementLogCreateLog;
    /**
     *
     * @type {Array<LogManagementLogCollectLogEntry>}
     * @memberof LogManagementLogCollectLog
     */
    'entries': Array<LogManagementLogCollectLogEntry>;
}
/**
 *
 * @export
 * @interface LogManagementLogCollectLogEntry
 */
export interface LogManagementLogCollectLogEntry {
    /**
     * The source of the entry, indicating what part of the system the entry is from.
     * @type {string}
     * @memberof LogManagementLogCollectLogEntry
     */
    'source': string;
    /**
     * The context of the entry, providing additional information to help understand the entry.
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementLogCollectLogEntry
     */
    'context': {
        [key: string]: any;
    };
    /**
     * The attributes of the entry, providing additional information not included in the main message.
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementLogCollectLogEntry
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {Array<string>}
     * @memberof LogManagementLogCollectLogEntry
     */
    'tags': Array<string>;
    /**
     * The timestamp indicating when the entry occurred.
     * @type {string}
     * @memberof LogManagementLogCollectLogEntry
     */
    'occurred_at': string;
}
/**
 *
 * @export
 * @interface LogManagementLogCreateLog
 */
export interface LogManagementLogCreateLog {
    /**
     * The namespace associated with the log.
     * @type {string}
     * @memberof LogManagementLogCreateLog
     */
    'namespace': string;
    /**
     * The severity level of the log.
     * @type {number}
     * @memberof LogManagementLogCreateLog
     */
    'level': LogManagementLogCreateLogLevelEnum;
    /**
     * The template used for formatting the log message.
     * @type {string}
     * @memberof LogManagementLogCreateLog
     */
    'template': string;
}
export declare const LogManagementLogCreateLogLevelEnum: {
    readonly NUMBER_100: 100;
    readonly NUMBER_200: 200;
    readonly NUMBER_250: 250;
    readonly NUMBER_300: 300;
    readonly NUMBER_400: 400;
    readonly NUMBER_500: 500;
    readonly NUMBER_550: 550;
    readonly NUMBER_600: 600;
};
export type LogManagementLogCreateLogLevelEnum = typeof LogManagementLogCreateLogLevelEnum[keyof typeof LogManagementLogCreateLogLevelEnum];
/**
 *
 * @export
 * @interface LogManagementLogCreateLogEntry
 */
export interface LogManagementLogCreateLogEntry {
    /**
     * The identity of the associated log.
     * @type {string}
     * @memberof LogManagementLogCreateLogEntry
     */
    'log_identity': string;
    /**
     * The source of the entry, indicating what part of the system the entry is from.
     * @type {string}
     * @memberof LogManagementLogCreateLogEntry
     */
    'source': string;
    /**
     * The context of the entry, providing additional information to help understand the entry.
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementLogCreateLogEntry
     */
    'context': {
        [key: string]: any;
    };
    /**
     * The attributes of the entry, providing additional information not included in the main message.
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementLogCreateLogEntry
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {Array<string>}
     * @memberof LogManagementLogCreateLogEntry
     */
    'tags': Array<string>;
    /**
     * The timestamp indicating when the entry occurred.
     * @type {string}
     * @memberof LogManagementLogCreateLogEntry
     */
    'occurred_at': string;
}
/**
 * The order of the log entries.
 * @export
 * @enum {string}
 */
export declare const LogManagementLogLogEntryFilterOrder: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type LogManagementLogLogEntryFilterOrder = typeof LogManagementLogLogEntryFilterOrder[keyof typeof LogManagementLogLogEntryFilterOrder];
/**
 * Resource representing a log entry.
 * @export
 * @interface LogManagementLogLogEntryResource
 */
export interface LogManagementLogLogEntryResource {
    /**
     * Type of the resource.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'type': LogManagementLogLogEntryResourceTypeEnum;
    /**
     * Unique identity of the log entry.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'identity': string;
    /**
     * Identity of the associated log.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'log_identity': string;
    /**
     * Source of the log entry.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'source': string;
    /**
     * Contextual information for the log entry.
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementLogLogEntryResource
     */
    'context': {
        [key: string]: any;
    };
    /**
     * Attributes associated with the log entry.
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementLogLogEntryResource
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     * Tags associated with the log entry.
     * @type {Array<string>}
     * @memberof LogManagementLogLogEntryResource
     */
    'tags': Array<string>;
    /**
     * Timestamp when the log entry occurred.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'occurred_at': string;
    /**
     * Timestamp when the log entry was created.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'created_at': string;
    /**
     * Timestamp when the log entry was last updated.
     * @type {string}
     * @memberof LogManagementLogLogEntryResource
     */
    'updated_at': string;
}
export declare const LogManagementLogLogEntryResourceTypeEnum: {
    readonly LogEntry: "log_entry";
};
export type LogManagementLogLogEntryResourceTypeEnum = typeof LogManagementLogLogEntryResourceTypeEnum[keyof typeof LogManagementLogLogEntryResourceTypeEnum];
/**
 * Paginated collection of LogEntryResource.
 * @export
 * @interface LogManagementLogLogEntryResourcePaginatedCollectionResource
 */
export interface LogManagementLogLogEntryResourcePaginatedCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'type': LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum;
    /**
     * Current page number.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'page': number;
    /**
     * Number of items per page.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'items_per_page': number;
    /**
     * Total number of items.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'total_items': number;
    /**
     * First item index.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'first': number;
    /**
     * Last item index.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'last': number;
    /**
     * Next page number, if available.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'next'?: number | null;
    /**
     * Previous page number, if available.
     * @type {number}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'previous'?: number | null;
    /**
     * Array of LogEntryResource.
     * @type {Array<LogManagementLogLogEntryResource>}
     * @memberof LogManagementLogLogEntryResourcePaginatedCollectionResource
     */
    'items': Array<LogManagementLogLogEntryResource>;
}
export declare const LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum: {
    readonly PaginatedCollection: "paginated_collection";
};
export type LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum = typeof LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum[keyof typeof LogManagementLogLogEntryResourcePaginatedCollectionResourceTypeEnum];
/**
 * Resource representing a log entry source.
 * @export
 * @interface LogManagementLogLogEntrySourceResource
 */
export interface LogManagementLogLogEntrySourceResource {
    /**
     * Type of the resource.
     * @type {string}
     * @memberof LogManagementLogLogEntrySourceResource
     */
    'type': LogManagementLogLogEntrySourceResourceTypeEnum;
    /**
     * Source of the log entry.
     * @type {string}
     * @memberof LogManagementLogLogEntrySourceResource
     */
    'source': string;
}
export declare const LogManagementLogLogEntrySourceResourceTypeEnum: {
    readonly LogEntrySource: "log_entry_source";
};
export type LogManagementLogLogEntrySourceResourceTypeEnum = typeof LogManagementLogLogEntrySourceResourceTypeEnum[keyof typeof LogManagementLogLogEntrySourceResourceTypeEnum];
/**
 * Collection of LogEntrySourceResource.
 * @export
 * @interface LogManagementLogLogEntrySourceResourceCollectionResource
 */
export interface LogManagementLogLogEntrySourceResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogLogEntrySourceResourceCollectionResource
     */
    'type': LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum;
    /**
     * Array of LogEntrySourceResource.
     * @type {Array<LogManagementLogLogEntrySourceResource>}
     * @memberof LogManagementLogLogEntrySourceResourceCollectionResource
     */
    'items': Array<LogManagementLogLogEntrySourceResource>;
}
export declare const LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum: {
    readonly Collection: "collection";
};
export type LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum = typeof LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogLogEntrySourceResourceCollectionResourceTypeEnum];
/**
 * Resource representing a log entry tag.
 * @export
 * @interface LogManagementLogLogEntryTagResource
 */
export interface LogManagementLogLogEntryTagResource {
    /**
     * Type of the resource.
     * @type {string}
     * @memberof LogManagementLogLogEntryTagResource
     */
    'type': LogManagementLogLogEntryTagResourceTypeEnum;
    /**
     * Tag of the log entry.
     * @type {string}
     * @memberof LogManagementLogLogEntryTagResource
     */
    'tag': string;
}
export declare const LogManagementLogLogEntryTagResourceTypeEnum: {
    readonly LogEntryTag: "log_entry_tag";
};
export type LogManagementLogLogEntryTagResourceTypeEnum = typeof LogManagementLogLogEntryTagResourceTypeEnum[keyof typeof LogManagementLogLogEntryTagResourceTypeEnum];
/**
 * Collection of LogEntryTagResource.
 * @export
 * @interface LogManagementLogLogEntryTagResourceCollectionResource
 */
export interface LogManagementLogLogEntryTagResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogLogEntryTagResourceCollectionResource
     */
    'type': LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum;
    /**
     * Array of LogEntryTagResource.
     * @type {Array<LogManagementLogLogEntryTagResource>}
     * @memberof LogManagementLogLogEntryTagResourceCollectionResource
     */
    'items': Array<LogManagementLogLogEntryTagResource>;
}
export declare const LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum: {
    readonly Collection: "collection";
};
export type LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum = typeof LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogLogEntryTagResourceCollectionResourceTypeEnum];
/**
 * The order of the logs.
 * @export
 * @enum {string}
 */
export declare const LogManagementLogLogFilterOrder: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};
export type LogManagementLogLogFilterOrder = typeof LogManagementLogLogFilterOrder[keyof typeof LogManagementLogLogFilterOrder];
/**
 * The field to sort the logs by.
 * @export
 * @enum {string}
 */
export declare const LogManagementLogLogFilterSortBy: {
    readonly CreatedAt: "createdAt";
    readonly UpdatedAt: "updatedAt";
    readonly FirstEntryOccurredAt: "firstEntryOccurredAt";
    readonly LastEntryOccurredAt: "lastEntryOccurredAt";
    readonly Level: "level";
};
export type LogManagementLogLogFilterSortBy = typeof LogManagementLogLogFilterSortBy[keyof typeof LogManagementLogLogFilterSortBy];
/**
 * Resource representing a log namespace.
 * @export
 * @interface LogManagementLogLogNamespaceResource
 */
export interface LogManagementLogLogNamespaceResource {
    /**
     * Type of the resource.
     * @type {string}
     * @memberof LogManagementLogLogNamespaceResource
     */
    'type': LogManagementLogLogNamespaceResourceTypeEnum;
    /**
     * Namespace of the log.
     * @type {string}
     * @memberof LogManagementLogLogNamespaceResource
     */
    'namespace': string;
}
export declare const LogManagementLogLogNamespaceResourceTypeEnum: {
    readonly LogNamespace: "log_namespace";
};
export type LogManagementLogLogNamespaceResourceTypeEnum = typeof LogManagementLogLogNamespaceResourceTypeEnum[keyof typeof LogManagementLogLogNamespaceResourceTypeEnum];
/**
 * Collection of LogNamespaceResource.
 * @export
 * @interface LogManagementLogLogNamespaceResourceCollectionResource
 */
export interface LogManagementLogLogNamespaceResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogLogNamespaceResourceCollectionResource
     */
    'type': LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum;
    /**
     * Array of LogNamespaceResource.
     * @type {Array<LogManagementLogLogNamespaceResource>}
     * @memberof LogManagementLogLogNamespaceResourceCollectionResource
     */
    'items': Array<LogManagementLogLogNamespaceResource>;
}
export declare const LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum: {
    readonly Collection: "collection";
};
export type LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum = typeof LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogLogNamespaceResourceCollectionResourceTypeEnum];
/**
 * Resource representing a log.
 * @export
 * @interface LogManagementLogLogResource
 */
export interface LogManagementLogLogResource {
    /**
     * Type of the resource.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'type': LogManagementLogLogResourceTypeEnum;
    /**
     * Unique identity of the log.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'identity': string;
    /**
     * The namespace of the log.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'namespace': string;
    /**
     *
     * @type {LogManagementLogLogResourceLevel}
     * @memberof LogManagementLogLogResource
     */
    'level': LogManagementLogLogResourceLevel;
    /**
     * The template for formatting the message.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'template': string;
    /**
     * Timestamp of the first entry occurrence, if available.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'first_entry_occurred_at'?: string | null;
    /**
     * Timestamp of the last entry occurrence, if available.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'last_entry_occurred_at'?: string | null;
    /**
     * Timestamp when the log was created.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'created_at': string;
    /**
     * Timestamp when the log was last updated.
     * @type {string}
     * @memberof LogManagementLogLogResource
     */
    'updated_at': string;
}
export declare const LogManagementLogLogResourceTypeEnum: {
    readonly Log: "log";
};
export type LogManagementLogLogResourceTypeEnum = typeof LogManagementLogLogResourceTypeEnum[keyof typeof LogManagementLogLogResourceTypeEnum];
/**
 * The log level.
 * @export
 * @interface LogManagementLogLogResourceLevel
 */
export interface LogManagementLogLogResourceLevel {
    /**
     * Name of the log level.
     * @type {string}
     * @memberof LogManagementLogLogResourceLevel
     */
    'name': LogManagementLogLogResourceLevelNameEnum;
    /**
     * Value of the log level.
     * @type {number}
     * @memberof LogManagementLogLogResourceLevel
     */
    'value': LogManagementLogLogResourceLevelValueEnum;
}
export declare const LogManagementLogLogResourceLevelNameEnum: {
    readonly Debug: "Debug";
    readonly Info: "Info";
    readonly Notice: "Notice";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly Critical: "Critical";
    readonly Alert: "Alert";
    readonly Emergency: "Emergency";
};
export type LogManagementLogLogResourceLevelNameEnum = typeof LogManagementLogLogResourceLevelNameEnum[keyof typeof LogManagementLogLogResourceLevelNameEnum];
export declare const LogManagementLogLogResourceLevelValueEnum: {
    readonly NUMBER_100: 100;
    readonly NUMBER_200: 200;
    readonly NUMBER_250: 250;
    readonly NUMBER_300: 300;
    readonly NUMBER_400: 400;
    readonly NUMBER_500: 500;
    readonly NUMBER_550: 550;
    readonly NUMBER_600: 600;
};
export type LogManagementLogLogResourceLevelValueEnum = typeof LogManagementLogLogResourceLevelValueEnum[keyof typeof LogManagementLogLogResourceLevelValueEnum];
/**
 * Paginated collection of LogResource.
 * @export
 * @interface LogManagementLogLogResourcePaginatedCollectionResource
 */
export interface LogManagementLogLogResourcePaginatedCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'type': LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum;
    /**
     * Current page number.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'page': number;
    /**
     * Number of items per page.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'items_per_page': number;
    /**
     * Total number of items.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'total_items': number;
    /**
     * First item index.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'first': number;
    /**
     * Last item index.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'last': number;
    /**
     * Next page number, if available.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'next'?: number | null;
    /**
     * Previous page number, if available.
     * @type {number}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'previous'?: number | null;
    /**
     * Array of LogResource.
     * @type {Array<LogManagementLogLogResource>}
     * @memberof LogManagementLogLogResourcePaginatedCollectionResource
     */
    'items': Array<LogManagementLogLogResource>;
}
export declare const LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum: {
    readonly PaginatedCollection: "paginated_collection";
};
export type LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum = typeof LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum[keyof typeof LogManagementLogLogResourcePaginatedCollectionResourceTypeEnum];
/**
 * The frequency for log statistics, specifying how the data should be aggregated.
 * @export
 * @enum {string}
 */
export declare const LogManagementLogStatisticsFrequency: {
    readonly Yearly: "yearly";
    readonly Quarterly: "quarterly";
    readonly Monthly: "monthly";
    readonly Weekly: "weekly";
    readonly Daily: "daily";
    readonly Hourly: "hourly";
};
export type LogManagementLogStatisticsFrequency = typeof LogManagementLogStatisticsFrequency[keyof typeof LogManagementLogStatisticsFrequency];
/**
 * Resource representing the frequency count of log entries.
 * @export
 * @interface LogManagementLogStatisticsLogEntryFrequencyCountResource
 */
export interface LogManagementLogStatisticsLogEntryFrequencyCountResource {
    /**
     * Type identifier for the resource.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResource
     */
    'type': LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum;
    /**
     * Date associated with the frequency count.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResource
     */
    'date': string;
    /**
     * Count of log entries for the specified date.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResource
     */
    'count': number;
}
export declare const LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum: {
    readonly LogEntryFrequencyCount: "log_entry_frequency_count";
};
export type LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum = typeof LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogEntryFrequencyCountResourceTypeEnum];
/**
 * Collection of LogEntryFrequencyCountResource.
 * @export
 * @interface LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource
 */
export interface LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource
     */
    'type': LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum;
    /**
     * Start date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource
     */
    'from': string;
    /**
     * End date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource
     */
    'to': string;
    /**
     * Array of LogEntryFrequencyCountResource.
     * @type {Array<LogManagementLogStatisticsLogEntryFrequencyCountResource>}
     * @memberof LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource
     */
    'items': Array<LogManagementLogStatisticsLogEntryFrequencyCountResource>;
}
export declare const LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum: {
    readonly StatisticCollection: "statistic_collection";
};
export type LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum = typeof LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResourceTypeEnum];
/**
 * Resource representing the frequency count of log entries by source.
 * @export
 * @interface LogManagementLogStatisticsLogEntrySourceFrequencyResource
 */
export interface LogManagementLogStatisticsLogEntrySourceFrequencyResource {
    /**
     * Type identifier for the resource.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResource
     */
    'type': LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum;
    /**
     * Source associated with the frequency count.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResource
     */
    'source': string;
    /**
     * Count of log entries for the specified source.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResource
     */
    'count': number;
    /**
     * Percentage of log entries for the specified source.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResource
     */
    'percentage': number;
}
export declare const LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum: {
    readonly LogEntrySourceFrequency: "log_entry_source_frequency";
};
export type LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum = typeof LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogEntrySourceFrequencyResourceTypeEnum];
/**
 * Collection of LogEntrySourceFrequencyResource.
 * @export
 * @interface LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource
 */
export interface LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource
     */
    'type': LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum;
    /**
     * Start date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource
     */
    'from': string;
    /**
     * End date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource
     */
    'to': string;
    /**
     * Array of LogEntrySourceFrequencyResource.
     * @type {Array<LogManagementLogStatisticsLogEntrySourceFrequencyResource>}
     * @memberof LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource
     */
    'items': Array<LogManagementLogStatisticsLogEntrySourceFrequencyResource>;
}
export declare const LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum: {
    readonly StatisticCollection: "statistic_collection";
};
export type LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum = typeof LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResourceTypeEnum];
/**
 * Resource representing the distribution of log entries by tag.
 * @export
 * @interface LogManagementLogStatisticsLogEntryTagDistributionResource
 */
export interface LogManagementLogStatisticsLogEntryTagDistributionResource {
    /**
     * Type identifier for the resource.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResource
     */
    'type': LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum;
    /**
     * Tag associated with the distribution.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResource
     */
    'tag': string;
    /**
     * Count of log entries for the specified tag.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResource
     */
    'count': number;
}
export declare const LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum: {
    readonly LogEntryTagDistribution: "log_entry_tag_distribution";
};
export type LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum = typeof LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogEntryTagDistributionResourceTypeEnum];
/**
 * Collection of LogEntryTagDistributionResource.
 * @export
 * @interface LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource
 */
export interface LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource
     */
    'type': LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum;
    /**
     * Start date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource
     */
    'from': string;
    /**
     * End date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource
     */
    'to': string;
    /**
     * Array of LogEntryTagDistributionResource.
     * @type {Array<LogManagementLogStatisticsLogEntryTagDistributionResource>}
     * @memberof LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource
     */
    'items': Array<LogManagementLogStatisticsLogEntryTagDistributionResource>;
}
export declare const LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum: {
    readonly StatisticCollection: "statistic_collection";
};
export type LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum = typeof LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResourceTypeEnum];
/**
 * Resource representing the frequency count of logs.
 * @export
 * @interface LogManagementLogStatisticsLogFrequencyCountResource
 */
export interface LogManagementLogStatisticsLogFrequencyCountResource {
    /**
     * Type identifier for the resource.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResource
     */
    'type': LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum;
    /**
     * Date associated with the frequency count.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResource
     */
    'date': string;
    /**
     * Count of logs for the specified date.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResource
     */
    'count': number;
}
export declare const LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum: {
    readonly LogFrequencyCount: "log_frequency_count";
};
export type LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum = typeof LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogFrequencyCountResourceTypeEnum];
/**
 * Collection of LogFrequencyCountResource.
 * @export
 * @interface LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource
 */
export interface LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource
     */
    'type': LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum;
    /**
     * Start date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource
     */
    'from': string;
    /**
     * End date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource
     */
    'to': string;
    /**
     * Array of LogFrequencyCountResource.
     * @type {Array<LogManagementLogStatisticsLogFrequencyCountResource>}
     * @memberof LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource
     */
    'items': Array<LogManagementLogStatisticsLogFrequencyCountResource>;
}
export declare const LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum: {
    readonly StatisticCollection: "statistic_collection";
};
export type LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum = typeof LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogFrequencyCountResourceCollectionResourceTypeEnum];
/**
 * Resource representing the statistics of logs by level.
 * @export
 * @interface LogManagementLogStatisticsLogLevelStatisticResource
 */
export interface LogManagementLogStatisticsLogLevelStatisticResource {
    /**
     * Type identifier for the resource.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResource
     */
    'type': LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum;
    /**
     *
     * @type {LogManagementLogStatisticsLogLevelStatisticResourceLevel}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResource
     */
    'level': LogManagementLogStatisticsLogLevelStatisticResourceLevel;
    /**
     * Count of logs for the specified level.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResource
     */
    'count': number;
    /**
     * Percentage of logs for the specified level.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResource
     */
    'percentage': number;
}
export declare const LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum: {
    readonly LogLevelStatistic: "log_level_statistic";
};
export type LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum = typeof LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogLevelStatisticResourceTypeEnum];
/**
 * Collection of LogLevelStatisticResource.
 * @export
 * @interface LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource
 */
export interface LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource {
    /**
     * Type identifier for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource
     */
    'type': LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum;
    /**
     * Start date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource
     */
    'from': string;
    /**
     * End date for the collection.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource
     */
    'to': string;
    /**
     * Array of LogLevelStatisticResource.
     * @type {Array<LogManagementLogStatisticsLogLevelStatisticResource>}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource
     */
    'items': Array<LogManagementLogStatisticsLogLevelStatisticResource>;
}
export declare const LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum: {
    readonly StatisticCollection: "statistic_collection";
};
export type LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum = typeof LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum[keyof typeof LogManagementLogStatisticsLogLevelStatisticResourceCollectionResourceTypeEnum];
/**
 * Level associated with the statistics.
 * @export
 * @interface LogManagementLogStatisticsLogLevelStatisticResourceLevel
 */
export interface LogManagementLogStatisticsLogLevelStatisticResourceLevel {
    /**
     * Name of the level.
     * @type {string}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResourceLevel
     */
    'name': LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum;
    /**
     * Value of the level.
     * @type {number}
     * @memberof LogManagementLogStatisticsLogLevelStatisticResourceLevel
     */
    'value': LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum;
}
export declare const LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum: {
    readonly Debug: "Debug";
    readonly Info: "Info";
    readonly Notice: "Notice";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly Critical: "Critical";
    readonly Alert: "Alert";
    readonly Emergency: "Emergency";
};
export type LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum = typeof LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum[keyof typeof LogManagementLogStatisticsLogLevelStatisticResourceLevelNameEnum];
export declare const LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum: {
    readonly NUMBER_100: 100;
    readonly NUMBER_200: 200;
    readonly NUMBER_250: 250;
    readonly NUMBER_300: 300;
    readonly NUMBER_400: 400;
    readonly NUMBER_500: 500;
    readonly NUMBER_550: 550;
    readonly NUMBER_600: 600;
};
export type LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum = typeof LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum[keyof typeof LogManagementLogStatisticsLogLevelStatisticResourceLevelValueEnum];
/**
 * Resource representing the ping
 * @export
 * @interface SharedPingResource
 */
export interface SharedPingResource {
    /**
     * Type of the resource.
     * @type {string}
     * @memberof SharedPingResource
     */
    'type': SharedPingResourceTypeEnum;
    /**
     * The date and time
     * @type {string}
     * @memberof SharedPingResource
     */
    'time': string;
    /**
     * A random quote from Hannibal, The Carthaginian General.
     * @type {string}
     * @memberof SharedPingResource
     */
    'quote': string;
}
export declare const SharedPingResourceTypeEnum: {
    readonly Ping: "ping";
};
export type SharedPingResourceTypeEnum = typeof SharedPingResourceTypeEnum[keyof typeof SharedPingResourceTypeEnum];
/**
 * LogManagementApi - axios parameter creator
 * @export
 */
export declare const LogManagementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Collect multiple log entries, for multiple logs.
     * @summary Collect Multiple Logs
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCollect: (requestBody?: {
        [key: string]: any;
    } | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Collect log entries from a log.
     * @summary Collect Log Entries
     * @param {LogManagementLogCollectLog} [logManagementLogCollectLog]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCollectLog: (logManagementLogCollectLog?: LogManagementLogCollectLog, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new log.
     * @summary Create Log
     * @param {LogManagementLogCreateLog} [logManagementLogCreateLog]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCreateLog: (logManagementLogCreateLog?: LogManagementLogCreateLog, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new log entry.
     * @summary Create Log Entry
     * @param {LogManagementLogCreateLogEntry} [logManagementLogCreateLogEntry]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCreateLogEntry: (logManagementLogCreateLogEntry?: LogManagementLogCreateLogEntry, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a log by identity.
     * @summary Delete Log
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementDeleteLog: (identity: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a log entry by identity.
     * @summary Delete Log Entry
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementDeleteLogEntry: (identity: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a log by its identity.
     * @summary Get Log
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLog: (identity: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a collection of logs.
     * @summary Get Log Collection
     * @param {string} [contains]
     * @param {Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>} [levels]
     * @param {string} [from]
     * @param {string} [to]
     * @param {LogManagementLogLogFilterSortBy} [sortBy]
     * @param {LogManagementLogLogFilterOrder} [order]
     * @param {number} [page] The page number for pagination. Defaults to 1.
     * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogCollection: (contains?: string, levels?: Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>, from?: string, to?: string, sortBy?: LogManagementLogLogFilterSortBy, order?: LogManagementLogLogFilterOrder, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a log entry by its identity.
     * @summary Get Log Entry
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntry: (identity: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a collection of log entries.
     * @summary Get Log Entry Collection
     * @param {number} [page] The page number for pagination. Defaults to 1.
     * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
     * @param {string} [logIdentity]
     * @param {string} [before]
     * @param {string} [after]
     * @param {LogManagementLogLogEntryFilterOrder} [order]
     * @param {string} [source]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryCollection: (page?: number, itemsPerPage?: number, logIdentity?: string, before?: string, after?: string, order?: LogManagementLogLogEntryFilterOrder, source?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the frequency count of log entries.
     * @summary Get Log Entry Frequency Count
     * @param {LogManagementLogStatisticsFrequency} frequency
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryFrequencyCountCollection: (frequency: LogManagementLogStatisticsFrequency, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a collection of log entry sources.
     * @summary Get Log Entry Source Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntrySourceCollection: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the frequency count of log entry sources.
     * @summary Get Log Entry Source Frequency
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntrySourceFrequencyCollection: (from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a collection of log entry tags.
     * @summary Get Log Entry Tag Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryTagCollection: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the distribution of log entry tags.
     * @summary Get Log Entry Tag Distribution
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryTagDistributionCollection: (from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the frequency count of logs.
     * @summary Get Log Frequency Count
     * @param {LogManagementLogStatisticsFrequency} frequency
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogFrequencyCountCollection: (frequency: LogManagementLogStatisticsFrequency, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the statistics of log levels.
     * @summary Get Log Level Statistics
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogLevelStatisticCollection: (from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a collection of log namespaces.
     * @summary Get Log Namespace Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogNamespaceCollection: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LogManagementApi - functional programming interface
 * @export
 */
export declare const LogManagementApiFp: (configuration?: Configuration) => {
    /**
     * Collect multiple log entries, for multiple logs.
     * @summary Collect Multiple Logs
     * @param {{ [key: string]: any; }} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCollect(requestBody?: {
        [key: string]: any;
    } | undefined, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Collect log entries from a log.
     * @summary Collect Log Entries
     * @param {LogManagementLogCollectLog} [logManagementLogCollectLog]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCollectLog(logManagementLogCollectLog?: LogManagementLogCollectLog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new log.
     * @summary Create Log
     * @param {LogManagementLogCreateLog} [logManagementLogCreateLog]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCreateLog(logManagementLogCreateLog?: LogManagementLogCreateLog, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogResource>>;
    /**
     * Create a new log entry.
     * @summary Create Log Entry
     * @param {LogManagementLogCreateLogEntry} [logManagementLogCreateLogEntry]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCreateLogEntry(logManagementLogCreateLogEntry?: LogManagementLogCreateLogEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogEntryResource>>;
    /**
     * Delete a log by identity.
     * @summary Delete Log
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementDeleteLog(identity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a log entry by identity.
     * @summary Delete Log Entry
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementDeleteLogEntry(identity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a log by its identity.
     * @summary Get Log
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLog(identity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogResource>>;
    /**
     * Retrieve a collection of logs.
     * @summary Get Log Collection
     * @param {string} [contains]
     * @param {Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>} [levels]
     * @param {string} [from]
     * @param {string} [to]
     * @param {LogManagementLogLogFilterSortBy} [sortBy]
     * @param {LogManagementLogLogFilterOrder} [order]
     * @param {number} [page] The page number for pagination. Defaults to 1.
     * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogCollection(contains?: string, levels?: Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>, from?: string, to?: string, sortBy?: LogManagementLogLogFilterSortBy, order?: LogManagementLogLogFilterOrder, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogResourcePaginatedCollectionResource>>;
    /**
     * Get a log entry by its identity.
     * @summary Get Log Entry
     * @param {string} identity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntry(identity: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogEntryResource>>;
    /**
     * Retrieve a collection of log entries.
     * @summary Get Log Entry Collection
     * @param {number} [page] The page number for pagination. Defaults to 1.
     * @param {number} [itemsPerPage] The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
     * @param {string} [logIdentity]
     * @param {string} [before]
     * @param {string} [after]
     * @param {LogManagementLogLogEntryFilterOrder} [order]
     * @param {string} [source]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryCollection(page?: number, itemsPerPage?: number, logIdentity?: string, before?: string, after?: string, order?: LogManagementLogLogEntryFilterOrder, source?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogEntryResourcePaginatedCollectionResource>>;
    /**
     * Get the frequency count of log entries.
     * @summary Get Log Entry Frequency Count
     * @param {LogManagementLogStatisticsFrequency} frequency
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryFrequencyCountCollection(frequency: LogManagementLogStatisticsFrequency, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource>>;
    /**
     * Retrieve a collection of log entry sources.
     * @summary Get Log Entry Source Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntrySourceCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogEntrySourceResourceCollectionResource>>;
    /**
     * Get the frequency count of log entry sources.
     * @summary Get Log Entry Source Frequency
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntrySourceFrequencyCollection(from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource>>;
    /**
     * Retrieve a collection of log entry tags.
     * @summary Get Log Entry Tag Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryTagCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogEntryTagResourceCollectionResource>>;
    /**
     * Get the distribution of log entry tags.
     * @summary Get Log Entry Tag Distribution
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryTagDistributionCollection(from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource>>;
    /**
     * Get the frequency count of logs.
     * @summary Get Log Frequency Count
     * @param {LogManagementLogStatisticsFrequency} frequency
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogFrequencyCountCollection(frequency: LogManagementLogStatisticsFrequency, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource>>;
    /**
     * Get the statistics of log levels.
     * @summary Get Log Level Statistics
     * @param {string} from
     * @param {string} to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogLevelStatisticCollection(from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource>>;
    /**
     * Retrieve a collection of log namespaces.
     * @summary Get Log Namespace Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogNamespaceCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogManagementLogLogNamespaceResourceCollectionResource>>;
};
/**
 * LogManagementApi - factory interface
 * @export
 */
export declare const LogManagementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Collect multiple log entries, for multiple logs.
     * @summary Collect Multiple Logs
     * @param {LogManagementApiLogManagementCollectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCollect(requestParameters?: LogManagementApiLogManagementCollectRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Collect log entries from a log.
     * @summary Collect Log Entries
     * @param {LogManagementApiLogManagementCollectLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCollectLog(requestParameters?: LogManagementApiLogManagementCollectLogRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create a new log.
     * @summary Create Log
     * @param {LogManagementApiLogManagementCreateLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCreateLog(requestParameters?: LogManagementApiLogManagementCreateLogRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogResource>;
    /**
     * Create a new log entry.
     * @summary Create Log Entry
     * @param {LogManagementApiLogManagementCreateLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementCreateLogEntry(requestParameters?: LogManagementApiLogManagementCreateLogEntryRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogEntryResource>;
    /**
     * Delete a log by identity.
     * @summary Delete Log
     * @param {LogManagementApiLogManagementDeleteLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementDeleteLog(requestParameters: LogManagementApiLogManagementDeleteLogRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a log entry by identity.
     * @summary Delete Log Entry
     * @param {LogManagementApiLogManagementDeleteLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementDeleteLogEntry(requestParameters: LogManagementApiLogManagementDeleteLogEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get a log by its identity.
     * @summary Get Log
     * @param {LogManagementApiLogManagementGetLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLog(requestParameters: LogManagementApiLogManagementGetLogRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogResource>;
    /**
     * Retrieve a collection of logs.
     * @summary Get Log Collection
     * @param {LogManagementApiLogManagementGetLogCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogCollection(requestParameters?: LogManagementApiLogManagementGetLogCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogResourcePaginatedCollectionResource>;
    /**
     * Get a log entry by its identity.
     * @summary Get Log Entry
     * @param {LogManagementApiLogManagementGetLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntry(requestParameters: LogManagementApiLogManagementGetLogEntryRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogEntryResource>;
    /**
     * Retrieve a collection of log entries.
     * @summary Get Log Entry Collection
     * @param {LogManagementApiLogManagementGetLogEntryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryCollection(requestParameters?: LogManagementApiLogManagementGetLogEntryCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogEntryResourcePaginatedCollectionResource>;
    /**
     * Get the frequency count of log entries.
     * @summary Get Log Entry Frequency Count
     * @param {LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryFrequencyCountCollection(requestParameters: LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource>;
    /**
     * Retrieve a collection of log entry sources.
     * @summary Get Log Entry Source Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntrySourceCollection(options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogEntrySourceResourceCollectionResource>;
    /**
     * Get the frequency count of log entry sources.
     * @summary Get Log Entry Source Frequency
     * @param {LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntrySourceFrequencyCollection(requestParameters: LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource>;
    /**
     * Retrieve a collection of log entry tags.
     * @summary Get Log Entry Tag Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryTagCollection(options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogEntryTagResourceCollectionResource>;
    /**
     * Get the distribution of log entry tags.
     * @summary Get Log Entry Tag Distribution
     * @param {LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogEntryTagDistributionCollection(requestParameters: LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource>;
    /**
     * Get the frequency count of logs.
     * @summary Get Log Frequency Count
     * @param {LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogFrequencyCountCollection(requestParameters: LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource>;
    /**
     * Get the statistics of log levels.
     * @summary Get Log Level Statistics
     * @param {LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogLevelStatisticCollection(requestParameters: LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource>;
    /**
     * Retrieve a collection of log namespaces.
     * @summary Get Log Namespace Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logManagementGetLogNamespaceCollection(options?: AxiosRequestConfig): AxiosPromise<LogManagementLogLogNamespaceResourceCollectionResource>;
};
/**
 * Request parameters for logManagementCollect operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementCollectRequest
 */
export interface LogManagementApiLogManagementCollectRequest {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof LogManagementApiLogManagementCollect
     */
    readonly requestBody?: {
        [key: string]: any;
    };
}
/**
 * Request parameters for logManagementCollectLog operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementCollectLogRequest
 */
export interface LogManagementApiLogManagementCollectLogRequest {
    /**
     *
     * @type {LogManagementLogCollectLog}
     * @memberof LogManagementApiLogManagementCollectLog
     */
    readonly logManagementLogCollectLog?: LogManagementLogCollectLog;
}
/**
 * Request parameters for logManagementCreateLog operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementCreateLogRequest
 */
export interface LogManagementApiLogManagementCreateLogRequest {
    /**
     *
     * @type {LogManagementLogCreateLog}
     * @memberof LogManagementApiLogManagementCreateLog
     */
    readonly logManagementLogCreateLog?: LogManagementLogCreateLog;
}
/**
 * Request parameters for logManagementCreateLogEntry operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementCreateLogEntryRequest
 */
export interface LogManagementApiLogManagementCreateLogEntryRequest {
    /**
     *
     * @type {LogManagementLogCreateLogEntry}
     * @memberof LogManagementApiLogManagementCreateLogEntry
     */
    readonly logManagementLogCreateLogEntry?: LogManagementLogCreateLogEntry;
}
/**
 * Request parameters for logManagementDeleteLog operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementDeleteLogRequest
 */
export interface LogManagementApiLogManagementDeleteLogRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementDeleteLog
     */
    readonly identity: string;
}
/**
 * Request parameters for logManagementDeleteLogEntry operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementDeleteLogEntryRequest
 */
export interface LogManagementApiLogManagementDeleteLogEntryRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementDeleteLogEntry
     */
    readonly identity: string;
}
/**
 * Request parameters for logManagementGetLog operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogRequest
 */
export interface LogManagementApiLogManagementGetLogRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLog
     */
    readonly identity: string;
}
/**
 * Request parameters for logManagementGetLogCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogCollectionRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly contains?: string;
    /**
     *
     * @type {Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly levels?: Array<100 | 200 | 250 | 300 | 400 | 500 | 550 | 600>;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly from?: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly to?: string;
    /**
     *
     * @type {LogManagementLogLogFilterSortBy}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly sortBy?: LogManagementLogLogFilterSortBy;
    /**
     *
     * @type {LogManagementLogLogFilterOrder}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly order?: LogManagementLogLogFilterOrder;
    /**
     * The page number for pagination. Defaults to 1.
     * @type {number}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly page?: number;
    /**
     * The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
     * @type {number}
     * @memberof LogManagementApiLogManagementGetLogCollection
     */
    readonly itemsPerPage?: number;
}
/**
 * Request parameters for logManagementGetLogEntry operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogEntryRequest
 */
export interface LogManagementApiLogManagementGetLogEntryRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntry
     */
    readonly identity: string;
}
/**
 * Request parameters for logManagementGetLogEntryCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogEntryCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogEntryCollectionRequest {
    /**
     * The page number for pagination. Defaults to 1.
     * @type {number}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly page?: number;
    /**
     * The number of items per page for pagination. Defaults to 20, with a maximum of 2000.
     * @type {number}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly itemsPerPage?: number;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly logIdentity?: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly before?: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly after?: string;
    /**
     *
     * @type {LogManagementLogLogEntryFilterOrder}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly order?: LogManagementLogLogEntryFilterOrder;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryCollection
     */
    readonly source?: string;
}
/**
 * Request parameters for logManagementGetLogEntryFrequencyCountCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest {
    /**
     *
     * @type {LogManagementLogStatisticsFrequency}
     * @memberof LogManagementApiLogManagementGetLogEntryFrequencyCountCollection
     */
    readonly frequency: LogManagementLogStatisticsFrequency;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryFrequencyCountCollection
     */
    readonly from: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryFrequencyCountCollection
     */
    readonly to: string;
}
/**
 * Request parameters for logManagementGetLogEntrySourceFrequencyCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntrySourceFrequencyCollection
     */
    readonly from: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntrySourceFrequencyCollection
     */
    readonly to: string;
}
/**
 * Request parameters for logManagementGetLogEntryTagDistributionCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryTagDistributionCollection
     */
    readonly from: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogEntryTagDistributionCollection
     */
    readonly to: string;
}
/**
 * Request parameters for logManagementGetLogFrequencyCountCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest {
    /**
     *
     * @type {LogManagementLogStatisticsFrequency}
     * @memberof LogManagementApiLogManagementGetLogFrequencyCountCollection
     */
    readonly frequency: LogManagementLogStatisticsFrequency;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogFrequencyCountCollection
     */
    readonly from: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogFrequencyCountCollection
     */
    readonly to: string;
}
/**
 * Request parameters for logManagementGetLogLevelStatisticCollection operation in LogManagementApi.
 * @export
 * @interface LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest
 */
export interface LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest {
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogLevelStatisticCollection
     */
    readonly from: string;
    /**
     *
     * @type {string}
     * @memberof LogManagementApiLogManagementGetLogLevelStatisticCollection
     */
    readonly to: string;
}
/**
 * LogManagementApi - object-oriented interface
 * @export
 * @class LogManagementApi
 * @extends {BaseAPI}
 */
export declare class LogManagementApi extends BaseAPI {
    /**
     * Collect multiple log entries, for multiple logs.
     * @summary Collect Multiple Logs
     * @param {LogManagementApiLogManagementCollectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCollect(requestParameters?: LogManagementApiLogManagementCollectRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Collect log entries from a log.
     * @summary Collect Log Entries
     * @param {LogManagementApiLogManagementCollectLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCollectLog(requestParameters?: LogManagementApiLogManagementCollectLogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new log.
     * @summary Create Log
     * @param {LogManagementApiLogManagementCreateLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCreateLog(requestParameters?: LogManagementApiLogManagementCreateLogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogResource, any>>;
    /**
     * Create a new log entry.
     * @summary Create Log Entry
     * @param {LogManagementApiLogManagementCreateLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementCreateLogEntry(requestParameters?: LogManagementApiLogManagementCreateLogEntryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogEntryResource, any>>;
    /**
     * Delete a log by identity.
     * @summary Delete Log
     * @param {LogManagementApiLogManagementDeleteLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementDeleteLog(requestParameters: LogManagementApiLogManagementDeleteLogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a log entry by identity.
     * @summary Delete Log Entry
     * @param {LogManagementApiLogManagementDeleteLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementDeleteLogEntry(requestParameters: LogManagementApiLogManagementDeleteLogEntryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a log by its identity.
     * @summary Get Log
     * @param {LogManagementApiLogManagementGetLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLog(requestParameters: LogManagementApiLogManagementGetLogRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogResource, any>>;
    /**
     * Retrieve a collection of logs.
     * @summary Get Log Collection
     * @param {LogManagementApiLogManagementGetLogCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogCollection(requestParameters?: LogManagementApiLogManagementGetLogCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogResourcePaginatedCollectionResource, any>>;
    /**
     * Get a log entry by its identity.
     * @summary Get Log Entry
     * @param {LogManagementApiLogManagementGetLogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntry(requestParameters: LogManagementApiLogManagementGetLogEntryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogEntryResource, any>>;
    /**
     * Retrieve a collection of log entries.
     * @summary Get Log Entry Collection
     * @param {LogManagementApiLogManagementGetLogEntryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryCollection(requestParameters?: LogManagementApiLogManagementGetLogEntryCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogEntryResourcePaginatedCollectionResource, any>>;
    /**
     * Get the frequency count of log entries.
     * @summary Get Log Entry Frequency Count
     * @param {LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryFrequencyCountCollection(requestParameters: LogManagementApiLogManagementGetLogEntryFrequencyCountCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogStatisticsLogEntryFrequencyCountResourceCollectionResource, any>>;
    /**
     * Retrieve a collection of log entry sources.
     * @summary Get Log Entry Source Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntrySourceCollection(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogEntrySourceResourceCollectionResource, any>>;
    /**
     * Get the frequency count of log entry sources.
     * @summary Get Log Entry Source Frequency
     * @param {LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntrySourceFrequencyCollection(requestParameters: LogManagementApiLogManagementGetLogEntrySourceFrequencyCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogStatisticsLogEntrySourceFrequencyResourceCollectionResource, any>>;
    /**
     * Retrieve a collection of log entry tags.
     * @summary Get Log Entry Tag Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryTagCollection(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogEntryTagResourceCollectionResource, any>>;
    /**
     * Get the distribution of log entry tags.
     * @summary Get Log Entry Tag Distribution
     * @param {LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogEntryTagDistributionCollection(requestParameters: LogManagementApiLogManagementGetLogEntryTagDistributionCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogStatisticsLogEntryTagDistributionResourceCollectionResource, any>>;
    /**
     * Get the frequency count of logs.
     * @summary Get Log Frequency Count
     * @param {LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogFrequencyCountCollection(requestParameters: LogManagementApiLogManagementGetLogFrequencyCountCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogStatisticsLogFrequencyCountResourceCollectionResource, any>>;
    /**
     * Get the statistics of log levels.
     * @summary Get Log Level Statistics
     * @param {LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogLevelStatisticCollection(requestParameters: LogManagementApiLogManagementGetLogLevelStatisticCollectionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogStatisticsLogLevelStatisticResourceCollectionResource, any>>;
    /**
     * Retrieve a collection of log namespaces.
     * @summary Get Log Namespace Collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogManagementApi
     */
    logManagementGetLogNamespaceCollection(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogManagementLogLogNamespaceResourceCollectionResource, any>>;
}
/**
 * SharedApi - axios parameter creator
 * @export
 */
export declare const SharedApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
     * @summary Retrieve the ping status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SharedApi - functional programming interface
 * @export
 */
export declare const SharedApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
     * @summary Retrieve the ping status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SharedPingResource>>;
};
/**
 * SharedApi - factory interface
 * @export
 */
export declare const SharedApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
     * @summary Retrieve the ping status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: AxiosRequestConfig): AxiosPromise<SharedPingResource>;
};
/**
 * SharedApi - object-oriented interface
 * @export
 * @class SharedApi
 * @extends {BaseAPI}
 */
export declare class SharedApi extends BaseAPI {
    /**
     * This endpoint is used to check the availability of the service. It returns a random quote from Hannibal, The Carthaginian General, along with the current time.
     * @summary Retrieve the ping status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SharedApi
     */
    ping(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SharedPingResource, any>>;
}
